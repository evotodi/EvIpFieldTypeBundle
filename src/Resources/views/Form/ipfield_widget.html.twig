{% block ip_widget %}
	{% spaceless %}
		{% if id is not defined %}
			{% set id = form.vars.id %}
		{% endif %}
		{% set cls = "" %}
		{% if class is defined %}
			{% set cls = class %}
		{% endif %}
		{% set id_func = id|replace({'-': "_", '*': '_', '/': '_', '+': '_'}) %}
		{% set fname = form.vars.full_name|split('[')[0] %}
		<div id="div_field_{{ id }}">
			{% for i in 0..ip_conf['group'] - 1%}
				{% if i != 0 %}{{ ip_conf['sep'] }}{% endif %}
				<input id="{{ id ~ i }}" class="{{ cls }}" data-parent="{{ id }}" onkeydown="onKeyPress_{{ id_func }}({{ i }}, event)" oninput="ip_check_input_{{ id_func }}(this, {{ i }})" onchange="ip_valid_input_{{ id_func }}(this.value, {{ i }})" maxlength="{{ ip_conf['group_length'] }}" style="width: {{ ip_conf['group_length'] * 10 }}px; padding: 0px; margin: 0px; border-style: solid; text-align: center;" autocomplete="off" {% if ip_conf['version'] == 4 %}required{% endif %} {% if disabled %}disabled{% endif %} {% if readonly %}readonly{% endif %}></input>
			{% endfor %}

			<script type="text/javascript">

				function onKeyPress_{{ id_func }}(idx, event)
				{
					if (event.keyCode == 39  && idx < {{ ip_conf['chars_max'] }})
						document.getElementById("{{ id }}" + (idx + 1)).focus();
					if (event.keyCode == 37  && idx > 0)
						document.getElementById("{{ id }}" + (idx - 1)).focus();
					return true;
				}

				function ip_check_input_{{ id_func }} (input, idx) {

					if (input.length == 0)
						return ;

					if (input.value.slice(-1) == "{{ ip_conf['sep'] }}"  && idx < {{ ip_conf['chars_max'] }})
						document.getElementById("{{ id }}" + (idx + 1)).focus();

					var value = parseInt(input.value, {{ ip_conf['base'] }});

					if (isNaN(value))
						value = "";

					if (value < 0)
						value = 0;
					else if (value > {{ ip_conf['max_value'] }})
					{
						value = {{ ip_conf['max_value'] }};
						ip_valid_input_{{ id_func }}(value, idx);
					}
					input.value = value.toString({{ ip_conf['base'] }});

					if (input.value.length == {{ ip_conf['chars_max'] }} && idx < {{ ip_conf['group'] }})
					{
						document.getElementById("{{ id }}" + (idx + 1)).focus();
					}
				}

				function ip_valid_input_{{ id_func }} (digit, idx) {
					digit = digit.replace(/[:\.]/g,"");
					var hidden = document.getElementById("{{ id }}");
					var split_ip = hidden.value.split("{{ ip_conf['sep'] }}");
					split_ip[idx] = digit.toString({{ ip_conf['base'] }});
					hidden.value = split_ip.join("{{ ip_conf['sep'] }}");
				}
			</script>
			{{ block('hidden_widget') }}
		</div>
	{% endspaceless %}
{% endblock %}